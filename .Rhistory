left_join(tab, by = 'MSNAME') %>%
select(-SAMPLEDATE, -`WQ Units`) %>%
rename(value = `WQ Analysis Value`) %>%
# group_by(`Storm #`, SITENAME, MSNAME, MSNAME__1) %>%
# summarise(value = mean(`WQ Analysis Value`)) %>%
# ungroup %>%
select(-MSNAME) %>%
unique %>%
spread(MSNAME__1, value)
datjn <- dat %>%
left_join(tab, by = 'MSNAME') %>%
select(-SAMPLEDATE, -`WQ Units`) %>%
rename(value = `WQ Analysis Value`) %>%
# group_by(`Storm #`, SITENAME, MSNAME, MSNAME__1) %>%
# summarise(value = mean(`WQ Analysis Value`)) %>%
# ungroup %>%
select(-MSNAME) %>%
unique
dat[c(193, 194),]
dat[c(151, 172, 331),]
dat[c(151, 171, 331),]
datjn <- dat %>%
left_join(tab, by = 'MSNAME') %>%
select(-SAMPLEDATE, -`WQ Units`) %>%
rename(value = `WQ Analysis Value`)
head(datjn)
datjn <- dat %>%
left_join(tab, by = 'MSNAME') %>%
select(-SAMPLEDATE, -`WQ Units`, -MSNAME)
library(tidyverse)
library(readxl)
dat <- read_excel('Z:/MarcusBeck/From Nabiul/I_O.xlsx')
tab <- read_excel('Z:/MarcusBeck/From Nabiul/New_Name.xlsx')
datjn <- dat %>%
left_join(tab, by = 'MSNAME')
head(datjn)
datjn <- dat %>%
left_join(tab, by = 'MSNAME') %>%
select(-SAMPLEDATE, -`WQ Units`, -MSNAME)
head(datjn)
dim(datjn)
dim(unique(datjn))
datjn <- dat %>%
left_join(tab, by = 'MSNAME') %>%
select(-SAMPLEDATE, -`WQ Units`, -MSNAME) %>%
group_by(`Storm #`, SITENAME, MSNAME, MSNAME__1, substation) %>%
summarise(value = mean(`WQ Analysis Value`)) %>%
ungroup
datjn <- dat %>%
left_join(tab, by = 'MSNAME') %>%
select(-SAMPLEDATE, -`WQ Units`, -MSNAME) %>%
group_by(`Storm #`, SITENAME, MSNAME__1, substation) %>%
summarise(value = mean(`WQ Analysis Value`)) %>%
ungroup
dim(datjn)
head(datjn)
datjn <- dat %>%
left_join(tab, by = 'MSNAME') %>%
select(-SAMPLEDATE, -`WQ Units`, -MSNAME) %>%
group_by(`Storm #`, SITENAME, MSNAME__1, substation) %>%
summarise(value = mean(`WQ Analysis Value`)) %>%
ungroup %>%
spread(MSNAME__1, value)
head(datjn)
View(datjn)
ecdf(datjn$Effluent)
ecdf(datjn$Effluent) %>% plot
ecdf(log(datjn$Effluent)) %>% plot
plot(Effluent ~ Influent, datjn)
tmp <- ecdf(datjn$Effluent)
names(tmp)
tmp
predict(Tmp)
predict(tmp)
?ecdf
tmp()
tmp(1:100)
tmp()
tmp(datjn$Effluent)
datjn <- dat %>%
left_join(tab, by = 'MSNAME') %>%
select(-SAMPLEDATE, -`WQ Units`, -MSNAME) %>%
group_by(`Storm #`, SITENAME, MSNAME__1, substation) %>%
summarise(value = mean(`WQ Analysis Value`)) %>%
ungroup %>%
spread(MSNAME__1, value)
ecdfin <- ecdf(datjn$Influent)
ecdfef <- ecdf(datjn$Effluent)
datjn <- dajn %>%
mutate(
ecdfin_prd = ecdfin(Influent),
ecdfef_prd = ecdfef(Effluent)
)
datjn <- dat %>%
left_join(tab, by = 'MSNAME') %>%
select(-SAMPLEDATE, -`WQ Units`, -MSNAME) %>%
group_by(`Storm #`, SITENAME, MSNAME__1, substation) %>%
summarise(value = mean(`WQ Analysis Value`)) %>%
ungroup %>%
spread(MSNAME__1, value)
ecdfin <- ecdf(datjn$Influent)
ecdfef <- ecdf(datjn$Effluent)
datjn <- datjn %>%
mutate(
ecdfin_prd = ecdfin(Influent),
ecdfef_prd = ecdfef(Effluent)
)
head(datjn)
plot(ecdfin_prd ~ Influence, datjn)
plot(ecdfin_prd ~ Influent, datjn)
plot(ecdfin_prd ~ log10(Influent), datjn)
points(log10(datjn$Effluent), datjn$Effluent)
p <- plot_ly(z = ~volcano, type = 'surface')
p <- bscols(
state_hist,
state_map
)
p <- plot_ly(z = ~volcano, type = 'surface')
tmpFile <- tempfile(fileext = ".png")
export(p, file = tmpFile)
?plotly_IMAGE
class(p)
p
library(crosstalk)
# create a shareddata object from states
sts <- SharedData$new(states)
# create sf object for states, estimate and add area
states <- st_as_sf(map('state', plot = F, fill = T))
area <- st_area(states)
area <- as.numeric(area) / (1000^2)
states$area <- area
# Chunk 1
knitr::opts_chunk$set(fig.path = '../img/', message = F, warning = F)
library(tidyverse)
library(maps)
library(sf)
library(raster)
library(tmap)
library(micromap)
library(ggrepel)
library(plotly)
# Chunk 4
library(plotly)
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)
tmpFile <- tempfile(fileext = ".png")
export(p, file = tmpFile)
# Chunk 6
p <- ggplot(data = iris, aes(x = Petal.Width, fill = Species)) +
geom_histogram()
p <- ggplotly(p)
tmpFile <- tempfile(fileext = ".png")
export(p, file = tmpFile)
# Chunk 9
# create sf object for states, estimate and add area
states <- st_as_sf(map('state', plot = F, fill = T))
area <- st_area(states)
area <- as.numeric(area) / (1000^2)
states$area <- area
# Chunk 11
p <- plot_ly(states)
tmpFile <- tempfile(fileext = ".png")
export(p, file = tmpFile)
# Chunk 13
p <- plot_ly(states, split = ~ID, color = ~ area, showlegend = F, alpha = 1)
tmpFile <- tempfile(fileext = ".png")
export(p, file = tmpFile)
# Chunk 15
p <- plot_ly(states, split = ~ID, color = ~ area, colors = 'PiYG', showlegend = F, alpha = 1)
tmpFile <- tempfile(fileext = ".png")
export(p, file = tmpFile)
# Chunk 17
library(crosstalk)
# create a shareddata object from states
sts <- SharedData$new(states)
# Chunk 18
# histogram of area
state_hist <- plot_ly(sts, x = ~ area) %>%
add_histogram(xbins = list(start = 0, end = 1e6, size = 1e4)) %>%
layout(barmode = "overlay") %>%
highlight(on = "plotly_selected", persistent = TRUE)
# state map, we're not mapping area anymore
state_map <- plot_ly(sts) %>%
highlight(persistent = T, dynamic = T)
p <- bscols(
state_hist,
state_map
)
p
p <- bscols(
state_hist,
state_map
)
tmpFile <- tempfile(fileext = ".png")
export(p, file = tmpFile)
# load sp library for meuse data
library(sp)
data(meuse)
# create sf object for meuse
dat <- st_as_sf(meuse, coords = c('x', 'y'), crs = "+init=epsg:28992")
# create a shareddata object for meuse
datshr <- SharedData$new(dat)
# scatterplot
meuse_sct <- plot_ly(datshr, x = ~ elev, y = ~ cadmium) %>%
add_markers() %>%
highlight(on = "plotly_selected", persistent = TRUE)
# map
meuse_map <- plot_ly(datshr) %>%
highlight(persistent = T, dynamic = T)
# combine scatterplot and map
bscols(
meuse_sct,
meuse_map
)
library(mapview)
p <- mapview(breweries)
tmpFile <- tempfile(fileext = ".png")
export(p, file = tmpFile)
mapview(breweries)
p <- mapview(states, zcol= "area")
tmpFile <- tempfile(fileext = ".png")
export(p, file = tmpFile)
mapview(states, zcol= "area")
a
plot_ly(z = ~volcano, type = 'surface')
?export
?tempfile
library(tmap)
?qtm
shp <- readOGR('../../../files/', "ef_lmr_huc12")
knitr::opts_chunk$set(fig.path = '../../../img/', message = F, warning = F)
library(tidyverse)
library(maps)
library(sf)
library(raster)
library(tmap)
library(micromap)
library(ggrepel)
library(plotly)
library(tmap)
library(micromap)
shp <- readOGR('../../../files/', "ef_lmr_huc12")
shp <- readOGR('files/', "ef_lmr_huc12")
shp <- readOGR('files/', layer = "ef_lmr_huc12")
shp <- readOGR(dsn = 'files/', layer = "ef_lmr_huc12")
shp <- readOGR(dsn = './files/', layer = "ef_lmr_huc12")
shp <- readOGR(dsn = 'files/', layer = "HUCs")
shp <- readOGR(dsn = 'files', layer = "HUCs")
shp <- readOGR(dsn = 'files', layer = "ef_lmr_huc12")
head(shp@data)
devtools::install_github('USEPA/micromap')
install.packages('micromap')
knitr::opts_chunk$set(fig.path = '../../../img/', message = F, warning = F)
library(tidyverse)
library(maps)
library(sf)
library(raster)
library(tmap)
library(micromap)
library(ggrepel)
library(plotly)
library(tmap)
library(micromap)
shp <- readOGR(dsn = '../../../files', layer = "ef_lmr_huc12")
shp <- readOGR(dsn = 'files', layer = "ef_lmr_huc12")
# Chunk 1
knitr::opts_chunk$set(fig.path = '../../../img/', message = F, warning = F)
library(tidyverse)
library(maps)
library(sf)
library(raster)
library(tmap)
library(micromap)
library(ggrepel)
library(plotly)
library(tmap)
library(micromap)
shp <- readOGR(dsn = '../../../files', layer = "ef_lmr_huc12")
# Chunk 2
unique(shp@data$huc12name)
# Chunk 3
huc12_ds1 <- shp@data
names(huc12_ds1)
str(huc12_ds1) # check huc12names is a factor
huc12_ds2 <- huc12_ds1 %>%
group_by(huc12name) %>%
summarize(decidmin = fivenum(PctDecid2011Cat)[1],
decidq1 = fivenum(PctDecid2011Cat)[2],
decidmed = fivenum(PctDecid2011Cat)[3],
decidq3 = fivenum(PctDecid2011Cat)[4],
decidmax = fivenum(PctDecid2011Cat)[5],
cropmin = fivenum(PctCrop2011Cat)[1],
cropq1 = fivenum(PctCrop2011Cat)[2],
cropmed = fivenum(PctCrop2011Cat)[3],
cropq3 = fivenum(PctCrop2011Cat)[4],
cropmax = fivenum(PctCrop2011Cat)[5])
huc12 <- readOGR('files', "ef_lmr_WBD_Sub")
huc12_ds2 <- huc12 %>%
group_by(huc12name) %>%
summarize(decidmin = fivenum(PctDecid2011Cat)[1],
decidq1 = fivenum(PctDecid2011Cat)[2],
decidmed = fivenum(PctDecid2011Cat)[3],
decidq3 = fivenum(PctDecid2011Cat)[4],
decidmax = fivenum(PctDecid2011Cat)[5],
cropmin = fivenum(PctCrop2011Cat)[1],
cropq1 = fivenum(PctCrop2011Cat)[2],
cropmed = fivenum(PctCrop2011Cat)[3],
cropq3 = fivenum(PctCrop2011Cat)[4],
cropmax = fivenum(PctCrop2011Cat)[5])
huc12_ds2 <- huc12@data %>%
group_by(huc12name) %>%
summarize(decidmin = fivenum(PctDecid2011Cat)[1],
decidq1 = fivenum(PctDecid2011Cat)[2],
decidmed = fivenum(PctDecid2011Cat)[3],
decidq3 = fivenum(PctDecid2011Cat)[4],
decidmax = fivenum(PctDecid2011Cat)[5],
cropmin = fivenum(PctCrop2011Cat)[1],
cropq1 = fivenum(PctCrop2011Cat)[2],
cropmed = fivenum(PctCrop2011Cat)[3],
cropq3 = fivenum(PctCrop2011Cat)[4],
cropmax = fivenum(PctCrop2011Cat)[5])
head(huc12@data)
shp <- readOGR(dsn = 'files', layer = "ef_lmr_huc12")
scnlcd2011 <- read.csv("files/NLCD2011_Region05.csv")
scnlcd2011 <- reshape::rename(scnlcd2011, c(COMID = "FEATUREID"))
names(scnlcd2011)
row.names(scnlcd2011) <- scnlcd2011$FEATUREID
efnlcd2011 <- scnlcd2011[match(shp$FEATUREID, scnlcd2011$FEATUREID),]
efnlcd2011 <- efnlcd2011 %>%
dplyr::mutate(logCrop = log(PctCrop2011Cat + 0.50),
logDecid = log(PctDecid2011Cat + 0.50))
shp@data = data.frame(shp@data, efnlcd2011[match(shp@data[,"FEATUREID"], efnlcd2011[,"FEATUREID"]),])
huc12_ds1 <- shp@data
huc12_ds2 <- huc12_ds1 %>%
group_by(huc12name) %>%
summarize(decidmin = fivenum(PctDecid2011Cat)[1],
decidq1 = fivenum(PctDecid2011Cat)[2],
decidmed = fivenum(PctDecid2011Cat)[3],
decidq3 = fivenum(PctDecid2011Cat)[4],
decidmax = fivenum(PctDecid2011Cat)[5],
cropmin = fivenum(PctCrop2011Cat)[1],
cropq1 = fivenum(PctCrop2011Cat)[2],
cropmed = fivenum(PctCrop2011Cat)[3],
cropq3 = fivenum(PctCrop2011Cat)[4],
cropmax = fivenum(PctCrop2011Cat)[5])
huc12 <- readOGR('files', "ef_lmr_WBD_Sub")
plot(huc12)
names(huc12@data)
huc12@data
hu12_ds2
huc12_ds2
dim(huc12@data)
head(huc12@data)
huc12@data <- huc12@data %>%
select(huc12name, HUC_8, HUC_10, HUC_12, SHAPE_Leng, SHAPE_Area)
huc12@data %>%
select(huc12name, HUC_8, HUC_10, HUC_12, SHAPE_Leng, SHAPE_Area) %>%
left_join(huc12_ds2, by = 'huc12name'
)
huc12@data <- huc12@data %>%
select(huc12name, HUC_8, HUC_10, HUC_12, SHAPE_Leng, SHAPE_Area) %>%
left_join(huc12_ds2, by = 'huc12name')
mmplot(map.data = huc12,
panel.types = c('dot_legend', 'labels', 'box_summary', 'box_summary', 'map'),
panel.data=list(NA,
'huc12name',
list('cropmin', 'cropq1', 'cropmed', 'cropq3', 'cropmax'),
list('decidmin', 'decidq1', 'decidmed', 'decidq3', 'decidmax'),
NA),
ord.by = 'cropmed',
rev.ord = TRUE,
grouping = 6,
median.row = FALSE
)
?writeOGR
writeOGR(huc12, dsn = 'files', 'micromap_dat')
writeOGR(huc12, dsn = 'files', 'micromap_dat', driver = "ESRI Shapefile")
shp <- readOGR(dsn = 'files', layer = "micromap_dat")
mmplot(map.data = shp,
panel.types = c('dot_legend', 'labels', 'box_summary', 'box_summary', 'map'),
panel.data=list(NA,
'huc12name',
list('cropmin', 'cropq1', 'cropmed', 'cropq3', 'cropmax'),
list('decidmin', 'decidq1', 'decidmed', 'decidq3', 'decidmax'),
NA),
ord.by = 'cropmed',
rev.ord = TRUE,
grouping = 6,
median.row = FALSE
)
shp <- readOGR(dsn = 'files', layer = "micromap_dat")
class(shp)
head(shp@data)
plot(shp)
mmplot(map.data = shp,
panel.types = c('dot_legend', 'labels', 'box_summary', 'box_summary', 'map'),
panel.data=list(NA,
'huc12name',
list('cropmin', 'cropq1', 'cropmed', 'cropq3', 'cropmax'),
list('decidmin', 'decidq1', 'decidmed', 'decidq3', 'decidmax'),
NA),
ord.by = 'cropmed',
rev.ord = TRUE,
grouping = 6,
median.row = FALSE
)
library(tidyverse)
library(maps)
library(sf)
library(raster)
library(tmap)
library(micromap)
library(ggrepel)
library(plotly)
library(tmap)
library(micromap)
mmplot(map.data = shp,
panel.types = c('dot_legend', 'labels', 'box_summary', 'box_summary', 'map'),
panel.data=list(NA,
'huc12name',
list('cropmin', 'cropq1', 'cropmed', 'cropq3', 'cropmax'),
list('decidmin', 'decidq1', 'decidmed', 'decidq3', 'decidmax'),
NA),
ord.by = 'cropmed',
rev.ord = TRUE,
grouping = 6,
median.row = FALSE
)
qtm(shp = shp, fill = c("PctDecid2011Cat", "PctCrop2011Cat"), fill.palette = c("Blues"), ncol =2)
qtm(shp = shp, fill = c("PctDecid2011Cat", "PctCrop2011Cat"), ncol =2)
?head(shp)
shp
names(shp@data)
qtm(shp = shp, fill = c("cropmed", "decidmed"), fill.palette = c("Blues"), ncol =2)
class(shp)
?micromap
?mmplot
vignette(package = 'micromap')
vignette(package = 'Introduction_Guide')
?vignette
vignette('Introduction_Guide, package = 'micromap')
vignette('Introduction_Guide', package = 'micromap')
data("World", "metro", package = "tmap")
metro
# get counties as sf object
counties <- st_as_sf(map('county', plot = F, fill = T))
# estimate area, append to counties
area <- st_area(counties)
area <- as.numeric(area) / (1000^2)
counties$area <- area
# make plotly
tmap(counties)
library(tmap)
# make plotly
tmap(counties)
# make plotly
qtm(counties)
class(Europe)
data(Europe)
class(Europe)
# load libraries
library(sf)
library(maps)
library(tmap)
# get states as sf
states <- st_as_sf(map('state', plot = F, fill = T))
# calculate area, add to states
area <- st_area(states)
area <- as.numeric(area) / 1e6
states$area <- area
head(states)
# chloropleth from qtm function
qtm(states, fill = "area", text = "ID", fill.title = "State area (km2)")
# chloropleth from qtm function
qtm(states, fill = "area", text = "ID", fill.title = "State area (km2)", text.root = 5)
# chloropleth from qtm function
qtm(states, fill = "area", text = "ID", fill.title = "State area (km2)", text.size='area')
?qtm
qtm(states, fill = "area", text = "ID", fill.title = "State area (km2)", text.size='area') +
theme(legend.position = 'top')
qtm(states, fill = "area", text = "ID", fill.title = "State area (km2)", text.size='area') +
tm_layout(legend.position = 'top')
qtm(states, fill = "area", text = "ID", fill.title = "State area (km2)", text.size='area')
qtm(states, fill = "area", text = "ID", fill.title = "State area (km2)", text.size='area') +
tm_layout(legend.position = 'top')
?tm_layout
# chloropleth from qtm function
qtm(states, fill = "area", text = "ID", fill.title = "State area (km2)", text.size='area') +
tm_layout(legend.outside.position = 'top')
# chloropleth from qtm function
qtm(states, fill = "area", text = "ID", fill.title = "State area (km2)", text.size='area') +
tm_layout(legend.outside = T)
library(USAboundaries)
download.file("https://github.com/ryan-hill/sfs-r-gis-2018/raw/gh-pages/files/data.zip",
"data.zip",
method="auto",
mode="wb")
unzip("data.zip")
unzip('files/data.zip')
shp <- readOGR(dsn = '../../../files/data', layer = "micromap_dat")
# Chunk 1
knitr::opts_chunk$set(fig.path = '../../../img/', message = F, warning = F)
library(tidyverse)
library(maps)
library(sf)
library(raster)
library(tmap)
library(micromap)
library(ggrepel)
library(plotly)
shp <- readOGR(dsn = './data', layer = "micromap_dat")
class(shp)
?readOGR
