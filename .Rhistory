1/14
cat(```{r, eval = F, results = 'hide'}\n```)
cat(readr::read_file_raw("```{r, eval = F, results = 'hide'}\n```"))
?includeText
mylocation
cities
library(maps)
cities
map.cities
?map.cities
map.cities(country = 'usa')
windows()
map.cities(country = 'usa')
?geocode
library(maptools)
?geocode
library(maps)
?geocode
library(ggmap)
?geocode
cities <- c('Ashland', 'Corvallis', 'Bend', 'Portland', 'Newport')
longitude <- c(-122.699, -123.275, -121.313, -122.670, -124.054)
latitude <- c(42.189, 44.57, 44.061, 45.523, 44.652)
population <- c(20062, 50297, 61362, 537557, 9603)
dat <- data.frame(longitude, latitude, population)
plot(longitude, latitude, data = dat)
head(dat)
cities <- c('Ashland', 'Corvallis', 'Bend', 'Portland', 'Newport')
longitude <- c(-122.699, -123.275, -121.313, -122.670, -124.054)
latitude <- c(42.189, 44.57, 44.061, 45.523, 44.652)
population <- c(20062, 50297, 61362, 537557, 9603)
dat <- data.frame(longitude, latitude, population)
plot(latitude ~ longitude, data = dat)
dat
install.packages('tmap')
?st_set_crs
library(sf)
?st_set_crs
dat_sf <- st_as_sf(dat, coords = c("longitude", "latitude"))
st_crs(dat_srf) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
head(dat_sf)
dat_sf <- st_as_sf(dat, coords = c("longitude", "latitude"))
st_crs(dat_sf) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
head(dat_sf)
plot(dat_sf)
?plot.sf
plot(dat_sf, col = dat_sf$population)
?maps
map('county', region = 'oregon')
map('county', region = 'oregon')
points(dat_sf)
plot(st_geometry(dat_sf))
map('county', region = 'oregon')
plot(st_geometry(dat_sf), add = T)
map('county', region = 'oregon')
plot(st_geometry(dat_sf), add = T, pch = 16)
plot(st_geometry(dat_sf), add = T, pch = 16, cex = dat_sf$population)
plot(st_geometry(dat_sf), add = T, pch = 16, cex = dat_sf$population/1000)
map('county', region = 'oregon')
plot(st_geometry(dat_sf), add = T, pch = 16, cex = dat_sf$population/1000)
dat_sf$population/1000
map('county', region = 'oregon')
plot(st_geometry(dat_sf), add = T, pch = 16, cex = dat_sf$population/1e5)
map('county', region = 'oregon')
plot(st_geometry(dat_sf), add = T, pch = 16, cex = sqrt(dat_sf$population * 0.002))
map('county', region = 'oregon')
plot(st_geometry(dat_sf), add = T, pch = 16, cex = sqrt(dat_sf$population * 0.0002))
plot(st_geometry(dat_sf), add = T, labels = dat_sf$cities)
text(st_geometry(dat_sf), add = T, labels = dat_sf$cities)
st_geometry(dat_sf)
text(st_geometry(dat_sf))
text(coordinates(dat_sf))
coords(dat_sf)
dat_sf[, c('Longitude', 'Latitude')]
library(tidyverse)
library(tidyverse)
library(devtools)
devtools::install_github('tidyverse/ggplot2')
devtools::install_github('tidyverse/ggplot2')
library(tidyverse)
?geom_sf
state <- st_as_sf(map('county', region = 'oregon', plot = F, fill = T))
ggplot() +
geom_sf(data = state)
geom_sf(data = dat_sf)
# Chunk 1
knitr::opts_chunk$set(fig.path = '../../../img')
library(tidyverse)
library(maps)
library(sf)
library(raster)
library(tmap)
library(micromap)
# Chunk 2
cities <- c('Ashland', 'Corvallis', 'Bend', 'Portland', 'Newport')
longitude <- c(-122.699, -123.275, -121.313, -122.670, -124.054)
latitude <- c(42.189, 44.57, 44.061, 45.523, 44.652)
population <- c(20062, 50297, 61362, 537557, 9603)
dat <- data.frame(cities, longitude, latitude, population)
plot(latitude ~ longitude, data = dat)
# Chunk 3
dat_sf <- st_as_sf(dat, coords = c("longitude", "latitude"))
st_crs(dat_sf) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
head(dat_sf)
# Chunk 4
plot(st_geometry(dat_sf))
# Chunk 5
map('county', region = 'oregon')
plot(st_geometry(dat_sf), add = T)
# Chunk 6
map('county', region = 'oregon')
plot(st_geometry(dat_sf), add = T, pch = 16, cex = sqrt(dat_sf$population * 0.0002))
state <- st_as_sf(map('county', region = 'oregon', plot = F, fill = T))
ggplot() +
geom_sf(data = state)
geom_sf(data = dat_sf)
ggplot() +
geom_sf(data = state) +
geom_sf(data = dat_sf, aes(size = population))
ggplot() +
geom_sf(data = state) +
geom_sf(data = dat_sf, aes(size = population, fill = population))
ggplot() +
geom_sf(data = state) +
geom_sf(data = dat_sf, aes(size = population, colour = population))
ggplot() +
# geom_sf(data = state) +
geom_sf(data = dat_sf, aes(size = population, colour = population))
ggplot() +
geom_sf(data = state) +
geom_sf(data = dat_sf, aes(size = population, colour = population))
# Chunk 1
knitr::opts_chunk$set(fig.path = '../../../img')
library(tidyverse)
library(maps)
library(sf)
library(raster)
library(tmap)
library(micromap)
# Chunk 2
cities <- c('Ashland', 'Corvallis', 'Bend', 'Portland', 'Newport')
longitude <- c(-122.699, -123.275, -121.313, -122.670, -124.054)
latitude <- c(42.189, 44.57, 44.061, 45.523, 44.652)
population <- c(20062, 50297, 61362, 537557, 9603)
dat <- data.frame(cities, longitude, latitude, population)
plot(latitude ~ longitude, data = dat)
# Chunk 3
dat_sf <- st_as_sf(dat, coords = c("longitude", "latitude"))
st_crs(dat_sf) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
head(dat_sf)
# Chunk 4
plot(st_geometry(dat_sf))
# Chunk 5
map('county', region = 'oregon')
plot(st_geometry(dat_sf), add = T)
# Chunk 6
map('county', region = 'oregon')
plot(st_geometry(dat_sf), add = T, pch = 16, cex = sqrt(dat_sf$population * 0.0002))
# Chunk 7
state <- st_as_sf(map('county', region = 'oregon', plot = F, fill = T))
# Chunk 8
ggplot() +
geom_sf(data = state) +
geom_sf(data = dat_sf)
# Chunk 9
ggplot() +
# geom_sf(data = state) +
geom_sf(data = dat_sf, aes(size = population, colour = population))
ggplot() +
# geom_sf(data = state) +
geom_sf(data = dat_sf, aes(size = population, colour = population), pch = 16)
ggplot() +
# geom_sf(data = state) +
geom_sf(data = dat_sf, aes(size = population, colour = population), pch = 21)
cities <- tibble::tribble(
~ lon,    ~ lat,    ~ name,      ~ pop,
5.121420, 52.09074, "Utrecht",   311367,
6.566502, 53.21938, "Groningen", 189991,
4.895168, 52.37022, "Amsterdam", 779808
) %>% sf::st_as_sf(coords = c("lon", "lat"), crs = 4326)
lines_sfc <- sf::st_sfc(list(
sf::st_linestring(rbind(cities$geometry[[1]], cities$geometry[[2]])),
sf::st_linestring(rbind(cities$geometry[[2]], cities$geometry[[3]]))
))
lines <- sf::st_sf(
id = 1:2,
size = c(10,50),
geometry = lines_sfc,
crs = 4326
)
ggplot() +
geom_sf(aes(size = pop), data = cities) +
geom_sf(aes(colour = size), data = lines)
ggplot() +
geom_sf(data = state) +
geom_sf(data = dat_sf, aes(size = population, colour = population))
geom_text(data = dat_sf, aes(x = Longitude, y = Latitude, labels = cities))
ggplot() +
geom_sf(data = state) +
geom_sf(data = dat_sf, aes(size = population, colour = population)) +
geom_text(data = dat_sf, aes(x = Longitude, y = Latitude, labels = cities))
dat_sf$Longitude
coordinates(dat_sf)
dat_sf$geometry
dat_sf$geometry$1
dat_sf$geometry$Latitude
st_geometry(dat_sf)
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population))
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = Longitude, y = Latitude, label = cities))
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(label = cities))
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities))
geom_text
?geom_text
library(ggrepel)
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities))
scale_size_manual(range = c(2, 9))
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities))
scale_size_manual(limits = c(2, 9))
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities)) +
scale_size_manual(limits = c(2, 9))
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities)) +
scale_size(limits = c(2, 9))
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities)) +
scale_size(range = c(2, 9))
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities)) +
scale_size(range = c(3, 10)) +
scale_colour_distiller(palette = 2)
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities)) +
scale_size(range = c(3, 10)) +
scale_colour_distiller(palette = 4)
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities)) +
scale_size(range = c(3, 10)) +
scale_colour_distiller(palette = 7)
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities)) +
scale_size(range = c(3, 10)) +
scale_colour_distiller(palette = 14)
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities)) +
scale_size(range = c(3, 10)) +
scale_colour_distiller(palette = 9)
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities)) +
scale_size(range = c(5, 20)) +
scale_colour_distiller(palette = 9)
?scale_colour_distiller
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities)) +
scale_size(range = c(3, 10)) +
scale_colour_distiller(type = 'div', palette = 9)
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities))
p <- last_plot()
lasp
p
p <- p +
scale_size(range = c(3, 10)) +
scale_colour_distiller(type = 'div', palette = 9)
p
p + guide(size = guide_legend(show = F))
p + guides(size = guide_legend(show = F))
p + scale_size(guide = F)
ggplot(dat_sf) +
geom_sf(data = state) +
geom_sf(aes(size = population, colour = population)) +
geom_text(aes(x = longitude, y = latitude, label = cities))
p <- last_plot()
p <- p +
scale_size(range = c(3, 10), guide = F) +
scale_colour_distiller(type = 'div', palette = 9)
p
p +
geom_text_repel(aes(x = longitude, y = latitude, label = cities))
?geom_text_repel
p + geom_text_repel(aes(x = longitude, y = latitude, label = cities), point.padding = 2)
p + geom_text_repel(aes(x = longitude, y = latitude, label = cities), point.padding = 1)
p + geom_text_repel(aes(x = longitude, y = latitude, label = cities), point.padding = 0.5)
p + geom_text_repel(aes(x = longitude, y = latitude, label = cities), point.padding = 0.5, segment.alpha = 0)
?mapvie4w
?mapview
library(mapview)
library(plotly)
devtools::install_github('brendan-R/brokcs')
devtools::install_github('brendan-R/brocks')
paste0(getwd(),"/modules/mapping/_posts/", Sys.Date(), "-")
dir      <- paste0(getwd(),"/modules/mapping/_posts/")
output   <- paste0("/modules/mapping/_posts/", sub('.Rmd', '.html', filename))
# Input the filename, update this for every post ----
filename <- "modules/mapping/_posts/2003-01-01-plotly-and-mapview.Rmd"
output   <- paste0("/modules/mapping/_posts/", sub('.Rmd', '.html', filename))
output
# Input the filename, update this for every post ----
filename <- "modules/mapping/_posts/2003-01-01-plotly-and-mapview.Rmd"
library(knitr)
library(brocks)
opts_chunk$set(comment= NA, fig.path='../../../img/')
dir      <- paste0(getwd(),"/modules/mapping/_posts/")
output   <- paste0("/modules/mapping/_posts/", sub('.Rmd', '.html', filename))
dir
output
filename
# Input the filename, update this for every post ----
filename <- "modules/mapping/_posts/2003-01-01-plotly-and-mapview.Rmd"
library(knitr)
library(brocks)
opts_chunk$set(comment= NA, fig.path='../../../img/')
dir      <- paste0(getwd(),"/modules/mapping/_posts/")
output   <- paste0(sub('.Rmd', '.html', filename))
output
paste0(Sys.Date(), "-", filename)
?htmlwidgets_deps
# Input the filename, update this for every post ----
filename <- "modules/mapping/_posts/2003-01-01-plotly-and-mapview.Rmd"
library(knitr)
library(brocks)
opts_chunk$set(comment= NA, fig.path='../../../img/')
dir      <- paste0(getwd(),"/modules/mapping/_posts/")
output   <- paste0(sub('.Rmd', '.html', filename))
knit(input= filename,
output=output,
encoding= 'UTF-8')
# Create the dependencies ----
htmlwidgets_deps(a= filename,
always = T)
todir
citation()
?colorRampPalette
